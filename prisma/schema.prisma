// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile information
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  boardItems    BoardItem[]
  resources     Resource[]
  plannerItems  PlannerItem[]
  posts         CommunityPost[]
  comments      Comment[]
  likes         Like[]

  @@map("users")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application models
model Board {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  status      BoardStatus @default(ACTIVE)
  visibility  Visibility  @default(PRIVATE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       BoardItem[]

  @@map("boards")
}

model BoardItem {
  id          String      @id @default(cuid())
  title       String
  content     String?     @db.Text
  type        ItemType    @default(NOTE)
  position    Int         @default(0)
  status      ItemStatus  @default(TODO)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  boardId     String
  userId      String

  // Relations
  board       Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("board_items")
}

model Resource {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  type        ResourceType @default(DOCUMENT)
  url         String?
  filePath    String?
  tags        String?
  visibility  Visibility  @default(PRIVATE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessons     Lesson[]    @relation("LessonToResource")

  @@map("resources")
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  subject     String?
  gradeLevel  String?
  duration    Int?        // Duration in minutes
  content     String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  resources   Resource[]  @relation("LessonToResource")
  plannerItems PlannerItem[]

  @@map("lessons")
}

model Planner {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  items       PlannerItem[]

  @@map("planners")
}

model PlannerItem {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  status      ItemStatus  @default(PLANNED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  plannerId   String
  lessonId    String?
  userId      String

  // Relations
  planner     Planner     @relation(fields: [plannerId], references: [id], onDelete: Cascade)
  lesson      Lesson?     @relation(fields: [lessonId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("planner_items")
}

model CommunityPost {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  tags        String?
  visibility  Visibility  @default(PUBLIC)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]

  @@map("community_posts")
}

model Comment {
  id          String      @id @default(cuid())
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  postId      String
  userId      String

  // Relations
  post        CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@map("comments")
}

model Like {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  userId      String
  contentType ContentType
  contentId   String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment     Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Optional fields for polymorphic relation
  postId      String?
  commentId   String?

  @@unique([userId, contentType, contentId])
  @@map("likes")
}

// Enums
enum Role {
  ADMIN
  PARENT
  STUDENT
  USER
}

enum BoardStatus {
  ACTIVE
  ARCHIVED
}

enum ItemStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  PLANNED
}

enum ItemType {
  NOTE
  TASK
  LINK
  FILE
}

enum ResourceType {
  DOCUMENT
  VIDEO
  LINK
  IMAGE
  OTHER
}

enum Visibility {
  PUBLIC
  PRIVATE
  SHARED
}

enum ContentType {
  POST
  COMMENT
}

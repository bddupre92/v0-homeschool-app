generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  resources     Resource[]
  boards        Board[]
  plannerItems  PlannerItem[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?   @db.Text
  type        String    // DOCUMENT, VIDEO, LINK, etc.
  url         String?
  filePath    String?
  tags        String[]
  visibility  String    // PRIVATE, PUBLIC
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id          String    @id @default(cuid())
  title       String
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       BoardItem[]
}

model BoardItem {
  id          String    @id @default(cuid())
  title       String
  description String?    @db.Text
  status      String     // TODO, IN_PROGRESS, DONE
  priority    String?    // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  boardId     String
  
  board       Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model PlannerItem {
  id          String    @id @default(cuid())
  title       String
  description String?    @db.Text
  startDate   DateTime
  endDate     DateTime?
  allDay      Boolean    @default(false)
  recurring   Boolean    @default(false)
  recurrence  String?    // DAILY, WEEKLY, MONTHLY
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
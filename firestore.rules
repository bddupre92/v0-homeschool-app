rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator');
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      
      // Prevent users from setting themselves as admin
      allow update: if isSignedIn() && isOwner(userId) && 
                     !('role' in request.resource.data) || 
                     request.resource.data.role == resource.data.role || 
                     isAdmin();
    }
    
    // Resources collection
    match /resources/{resourceId} {
      allow read: if true; // Public resources are readable by anyone
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.createdBy == request.auth.uid || isModerator());
      allow delete: if isSignedIn() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Boards collection
    match /boards/{boardId} {
      allow read: if resource.data.isPublic == true || 
                   (isSignedIn() && resource.data.createdBy == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if resource.data.isPublic == true || 
                   (isSignedIn() && resource.data.organizer == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.organizer == request.auth.uid || isModerator());
      allow delete: if isSignedIn() && 
        (resource.data.organizer == request.auth.uid || isAdmin());
    }
    
    // Locations collection
    match /locations/{locationId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.addedBy == request.auth.uid || isModerator());
      allow delete: if isAdmin();
    }
    
    // Community posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.authorId == request.auth.uid || isModerator());
      allow delete: if isSignedIn() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && 
          (resource.data.authorId == request.auth.uid || isModerator());
        allow delete: if isSignedIn() && 
          (resource.data.authorId == request.auth.uid || isModerator());
      }
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isModerator());
    }
    
    // User preferences
    match /preferences/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId);
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
  }
}
